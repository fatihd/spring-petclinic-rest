/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id "org.openapi.generator" version "6.2.1"
    id 'jacoco'
    id 'org.springframework.boot' version '2.6.2'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-cache:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.2'
    implementation 'org.springframework.data:spring-data-jdbc-core:1.2.1.RELEASE'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
    implementation('org.springdoc:springdoc-openapi-ui:1.6.11') {
        exclude group: 'org.springframework.boot'
    }
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
    implementation 'org.mapstruct:mapstruct:1.4.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    runtimeOnly 'org.hsqldb:hsqldb:2.5.2'
    runtimeOnly 'mysql:mysql-connector-java:8.0.27'
    runtimeOnly 'org.postgresql:postgresql:42.3.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.2'
    testImplementation 'org.springframework.security:spring-security-test:5.6.1'
    testImplementation 'com.jayway.jsonpath:json-path:2.6.0'
    testImplementation 'org.mockito:mockito-core:4.0.0'
}

group = 'org.springframework.samples'
version = '2.6.2'
description = 'spring-petclinic-rest'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava.dependsOn tasks.openApiGenerate

openApiGenerate {
    inputSpec = "$rootDir/src/main/resources/openapi.yml".toString()
    generatorName = 'spring'
    library = 'spring-boot'
    modelNameSuffix = 'Dto'
    apiPackage = 'org.springframework.samples.petclinic.rest.api'
    modelPackage = 'org.springframework.samples.petclinic.rest.dto'
    outputDir = "$buildDir/generated".toString()
    configOptions = [
            interfaceOnly        : 'true',
            performBeanValidation: 'true',
            dateLibrary          : 'java8',
            java8                : 'true',
            openApiNullable      : 'false',
            serializationLibrary : 'jackson',
            documentationProvider: 'springdoc'
    ]
}

sourceSets.main.java.srcDirs += ["$buildDir/generated/src/main/java"]

test {
    useJUnitPlatform()

    testLogging {
        showStandardStreams = true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'org/springframework/samples/petclinic/rest/dto/**',
                    'org/springframework/samples/petclinic/rest/api/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test

    violationRules {
        rule {
            limit {
                limit {
                    counter = 'LINE'
                    minimum = 0.85
                }
                limit {
                    counter = 'BRANCH'
                    minimum = 0.66
                }
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'org/springframework/samples/petclinic/rest/dto/**',
                    'org/springframework/samples/petclinic/rest/api/**'
            ])
        }))
    }
}
